{"componentChunkName":"component---src-templates-docs-js","path":"/Benchmarks","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"0e309922-9ebf-5a7b-b88f-54e1c98f402d","title":"Benchmarks","slug":"/Benchmarks"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This page collects data on benchmark measurements of Lingua Franca programs. The hardware on which these tests are run is detailed \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#Hardware\"\n  }, \"below\"), \".\"), mdx(\"h2\", null, \"Internal Benchmarks\"), mdx(\"p\", null, \"These are programs that are not part of any standard benchmark suite, but which we use to measure the impact of design changes.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"test/C/TimeLimit.lf\"), \": This program sends a counting sequence of length 10,000,002 from a source to a destination. Is is meant to measure the basic overhead of reaction invocation.\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Mac1\"), \": 583 msec (AVG), 562 msec (MIN), 648 msec (MAX), 577 msec (MED) (100 runs - Oct. 14, 2020)\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AGX\"), \": 1034 msec (AVG), 1031 msec (MIN), 1135 msec (MAX), 1031 msec (MED) (100 runs - Oct. 14, 2020)\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Wessel\"), \": 793 msec (AVG), 782 msec (MIN), 847 msec (MAX), 786 msec (MED) (100 runs - Dec. 5, 2020)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"test/C/TimeLimitThreaded.lf\"), \": This version of the previous test uses the threaded runtime. There is no exploitable parallelism, so no speedup is expected.\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Mac1\"), \" (with threads = 8): 1250 msec (MIN), 1088 msec (MIN), 1339 msec (MAX), 1308 msec (MED) (100 runs - Oct. 14, 2020)\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AGX\"), \" (with threads = 8): 1660 msec (AVG), 1650 msec (MIN), 1926 msec (MAX), 1656 msec (MED) (100 runs - Oct. 15 2020)\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Wessel\"), \" (with threads = 8): 1213 msec (AVG), 1195 msec (MIN), 1605 msec (MAX), 1212 msec (MED) (100 runs - Oct. 15 2020)\"))), mdx(\"h2\", null, \"Savina Benchmarks\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/shamsmahmood/savina\"\n  }, \"Savina benchmark suite\"), \" for actor languages and frameworks provides a number of useful patterns for measuring performance of Lingua Franca programs. See the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://shamsimam.github.io/papers/2014-agere-savina.pdf\"\n  }, \"paper on Savina\"), \". None of these benchmarks has any notion of time, and not all comparisons with the actor implementations will be fair.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"benchmark/C/Savina/PingPong.lf\"), \": This benchmark tests a feedback interaction where \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ping\"), \" sends a message to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Pong\"), \", which responds, triggering \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ping\"), \" to send another message. This gets repeated 1,000,000 times.  This version of the benchmark runs in the unthreaded runtime. Based on \", \"[https://www.scala-lang.org/old/node/54]\", \".\", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Mac1\"), \": 63 msec (AVG), 61 msec (MIN), 76 msec (MAX),62 msec (MED) (100 runs - Oct. 17, 2020)\", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AGX\"), \": 114 msec (AVG), 113 msec (MIN), 118 msec (MAX), 113 msec (MED) (100 runs - Oct. 14 2020)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"benchmark/C/Savina/PingPongThreaded.lf\"), \": Version of the previous benchmark runs in the threaded runtime with 8 worker threads. There is no parallelism, so no speedup is expected.\", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Mac1\"), \": 147 msec (AVG), 144 msec (MIN), 164 msec (MAX), 145 msec (MED) (100 runs - Oct. 17, 2020)\", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AGX\"), \": 217 msec (AVG), 216 msec (MIN), 254 msec (MAX), 216 msec (MED) (100 runs - Oct. 14 2020)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"benchmark/C/Savina/PingPongMultiThreaded.lf\"), \": Version of the previous benchmark runs in the threaded runtime with 8 worker threads and has two independent Ping-Pong benchmarks running together. There is parallelism, so speedup is expected, but instead, we get dramatic slowdown!\", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Mac1\"), \": 4269 msec (AVG), 4051 msec (MIN), 4405 msec (MAX), 4375 msec (MED) (10 runs, Oct. 17, 2020)\", mdx(\"br\", null), mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AGX\"), \": Crashed\")), mdx(\"h2\", null, \"Hardware\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Mac1\"), \":\\nModel Name:\\tMacBook Pro\", mdx(\"br\", null), \"\\nModel Identifier:\\tMacBookPro15,1\", mdx(\"br\", null), \"\\nProcessor Name:\\tIntel Core i9\", mdx(\"br\", null), \"\\nProcessor Speed:\\t2.3 GHz\", mdx(\"br\", null), \"\\nNumber of Processors:\\t1\", mdx(\"br\", null), \"\\nTotal Number of Cores:\\t8\", mdx(\"br\", null), \"\\nL2 Cache (per Core):\\t256 KB\", mdx(\"br\", null), \"\\nL3 Cache:\\t16 MB\", mdx(\"br\", null), \"\\nHyper-Threading Technology:\\tEnabled\", mdx(\"br\", null), \"\\nMemory:\\t32 GB\", mdx(\"br\", null), \"\\nOperating System: macOS 10.14.6 (Mojave)\", mdx(\"br\", null)), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AGX\"), \":\\nModel Name:\\tNVIDIA Jetson AGX Xavier\", mdx(\"br\", null), \"\\nModel Identifier:\\tJetson-AGX\", mdx(\"br\", null), \"\\nProcessor Name:\\tARMv8 Processor rev 0 (v8l)\", mdx(\"br\", null), \"\\nMax Processor Speed:\\t2265.6001 MHz (fixed for this benchmark)\", mdx(\"br\", null), \"\\nNumber of Processors:\\t1\", mdx(\"br\", null), \"\\nTotal Number of Cores:\\t8\", mdx(\"br\", null), \"\\nL2 Cache (per Core):\\t2048 KB\", mdx(\"br\", null), \"\\nL3 Cache:\\t4096 KB\", mdx(\"br\", null), \"\\nHyper-Threading Technology:\\tN/A\", mdx(\"br\", null), \"\\nMemory:\\t16 GB\", mdx(\"br\", null), \"\\nOperating System: Ubuntu 18.04 (Bionic) - JetPack 4.3\", mdx(\"br\", null)), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Wessel\"), \":\\nModel Name:\\tDell PowerEdge R730\", mdx(\"br\", null), \"\\nModel Identifier:\\tPowerEdge R730\", mdx(\"br\", null), \"\\nProcessor Name:\\t\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ark.intel.com/content/www/us/en/ark/products/81900/intel-xeon-processor-e5-2643-v3-20m-cache-3-40-ghz.html\"\n  }, \"Intel(R) Xeon(R) CPU E5-2643 v3 @ 3.40GHz\"), mdx(\"br\", null), \"\\nMax Processor Speed:\\t3.7Ghz (turbo)\", mdx(\"br\", null), \"\\nNumber of Processors:\\t1\", mdx(\"br\", null), \"\\nTotal Number of Cores:\\t6\", mdx(\"br\", null), \"\\nCache: 20 MB Intel\\xAE Smart Cache\", mdx(\"br\", null), \"\\nHyper-Threading Technology:\\tYes\", mdx(\"br\", null), \"\\nMemory:\\t94.3 GB\", mdx(\"br\", null), \"\\nOperating System: ArchLinux\", mdx(\"br\", null)));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#internal-benchmarks","title":"Internal Benchmarks"},{"url":"#savina-benchmarks","title":"Savina Benchmarks"},{"url":"#hardware","title":"Hardware"}]},"parent":{"relativePath":"Benchmarks.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Benchmarks","title":"Benchmarks"}}},{"node":{"fields":{"slug":"/A-future-proof-package-and-import-system","title":"A Future Proof Package And Import System"}}},{"node":{"fields":{"slug":"/Clone-the-Repository","title":"Clone The Repository"}}},{"node":{"fields":{"slug":"/Containerized-Execution","title":"Containerized Execution"}}},{"node":{"fields":{"slug":"/Contributing","title":"Contributing"}}},{"node":{"fields":{"slug":"/Creating-and-Managing-Submodules","title":"Creating And Managing Submodules"}}},{"node":{"fields":{"slug":"/Developer-IntelliJ-Setup-(for-Kotlin)","title":"Developer Intelli J Setup For Kotlin"}}},{"node":{"fields":{"slug":"/Diagrams","title":"Diagrams"}}},{"node":{"fields":{"slug":"/Distributed-Execution","title":"Distributed Execution"}}},{"node":{"fields":{"slug":"/Generic-Types,-Interfaces,-and-Inheritance","title":"Generic Types Interfaces And Inheritance"}}},{"node":{"fields":{"slug":"/Downloading-and-Building","title":"Downloading And Building"}}},{"node":{"fields":{"slug":"/Home","title":"Home"}}},{"node":{"fields":{"slug":"/Import-System","title":"Import System"}}},{"node":{"fields":{"slug":"/Legacy-Eclipse-Instructions","title":"Legacy Eclipse Instructions"}}},{"node":{"fields":{"slug":"/Maven-Notes","title":"Maven Notes"}}},{"node":{"fields":{"slug":"/Modal-Models-RFC","title":"Modal Models RFC"}}},{"node":{"fields":{"slug":"/Multiports-and-Banks-of-Reactors","title":"Multiports And Banks Of Reactors"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/Protobufs","title":"Protobufs"}}},{"node":{"fields":{"slug":"/Publications-and-Presentations","title":"Publications And Presentations"}}},{"node":{"fields":{"slug":"/Regression-Tests","title":"Regression Tests"}}},{"node":{"fields":{"slug":"/Related-Work","title":"Related Work"}}},{"node":{"fields":{"slug":"/Results-of-Experiments-for-Rhythm","title":"Results Of Experiments For Rhythm"}}},{"node":{"fields":{"slug":"/Running-Benchmarks","title":"Running Benchmarks"}}},{"node":{"fields":{"slug":"/Running-Lingua-Franca-IDE-(Epoch)-with-Kotlin-based-Code-Generators-Enabled-(without-Eclipse-Environment)","title":"Running Lingua Franca IDE Epoch With Kotlin Based Code Generators Enabled Without Eclipse Environment"}}},{"node":{"fields":{"slug":"/Support-Matrix","title":"Support Matrix"}}},{"node":{"fields":{"slug":"/Tardiness","title":"Tardiness"}}},{"node":{"fields":{"slug":"/Target-Specification","title":"Target Specification"}}},{"node":{"fields":{"slug":"/Termination","title":"Termination"}}},{"node":{"fields":{"slug":"/Timing-Analysis","title":"Timing Analysis"}}},{"node":{"fields":{"slug":"/Tools","title":"Tools"}}},{"node":{"fields":{"slug":"/Troubleshooting","title":"Troubleshooting"}}},{"node":{"fields":{"slug":"/Using-Maven","title":"Using Maven"}}},{"node":{"fields":{"slug":"/Web-Based-Editor","title":"Web Based Editor"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Cpp","title":"Writing Reactors In Cpp"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Python","title":"Writing Reactors In Python"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-TypeScript","title":"Writing Reactors In Type Script"}}}]}},"pageContext":{"id":"0e309922-9ebf-5a7b-b88f-54e1c98f402d"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}