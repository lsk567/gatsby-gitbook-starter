{"componentChunkName":"component---src-templates-docs-js","path":"/Diagrams","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"b875cf62-97dc-5389-b711-2495de7df790","title":"Diagrams","slug":"/Diagrams"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"The Eclipse-based LF IDE also provides automatically synthesized diagram representations for LF programs. They are based on the idea of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"transient views\"), \" that are created on-demand and usually focus on certain aspects of the program. This fits especially well with textual languages, such as LF, where a diagram allows for a fast and intuitive understanding of the general structure and important aspects of a program while the textual representation enables comfortable editing of every detail. A key enabler of this approach\\nis the automatic layout. It removes the tedious task of manually arranging elements in a diagram, which is especially undesirable when you are not even editing graphically in the first place. We implemented the diagram synthesis for LF with the KIELER Lightweight Diagrams framework.\"), mdx(\"h2\", null, \"Enabling Diagram Synthesis\"), mdx(\"p\", null, \"To be able to render diagrams in the Lingua Franca Eclipse runtime, some Eclipse plugins are required. If you \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"Developer-Eclipse-Setup-with-Oomph\"\n  }, \"installed the Eclipse developer setup\"), \", then you already have these plugins. If not, instructions are provided here.\"), mdx(\"p\", null, \"You can install these in the regular Eclipse editor; the LF runtime will inherit them.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Help -> Install New Software -> Add Update Site\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://kieler.github.io/KLighD/\"\n  }, \"https://kieler.github.io/KLighD/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Kieler Lightweight Diagrams Generic View\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Kieler Lightweight Diagrams Runtime\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"KIELER Lightweight Diagrams Vector Graphics Export Powered by FreeHEP\"), \". For debugging purposes, it may also be useful to install the respective source packages, which are also available through the KLighD update site.\")), mdx(\"p\", null, \"Now, start the LF Eclipse runtime as you normally would, open an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".lf\"), \" file and (next to the Console) click on the Diagram tab. If you don't have a Diagram tab, go to Window -> Show View -> Other and filter on the word \\\"Diagram\\\". A graphical rendering of the LF source should appear.\"), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Consider the following code:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Example from Schedule section of the C Reactor Target wiki page.\\ntarget C;\\nreactor Schedule {\\n    input x:int;\\n    logical action a;\\n    reaction(x) -> a {=\\n        schedule(a, MSEC(200), NULL);\\n    =}\\n    reaction(a) {=\\n        interval_t elapsed_time = get_elapsed_logical_time();\\n        printf(\\\"Action triggered at logical time %lld nsec after start.\\\\n\\\", elapsed_time);\\n        if (elapsed_time != 200000000LL) {\\n            printf(\\\"Expected action time to be 200 msec. It was %lld nsec.\\\\n\\\", elapsed_time);\\n            exit(1);\\n        }\\n    =}\\n}\\nmain reactor Main {\\n    a = new Schedule();\\n    timer t;\\n    reaction(t) -> a.x {=\\n        set(a.x, 1);\\n    =}\\n}\\n\")), mdx(\"p\", null, \"This code results in the following diagram:\\n\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"img/diagrams/ScheduleDiagram.png\",\n    \"alt\": null\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#enabling-diagram-synthesis","title":"Enabling Diagram Synthesis"},{"url":"#example","title":"Example"}]},"parent":{"relativePath":"Diagrams.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Benchmarks","title":"Benchmarks"}}},{"node":{"fields":{"slug":"/A-future-proof-package-and-import-system","title":"A Future Proof Package And Import System"}}},{"node":{"fields":{"slug":"/Clone-the-Repository","title":"Clone The Repository"}}},{"node":{"fields":{"slug":"/Containerized-Execution","title":"Containerized Execution"}}},{"node":{"fields":{"slug":"/Contributing","title":"Contributing"}}},{"node":{"fields":{"slug":"/Creating-and-Managing-Submodules","title":"Creating And Managing Submodules"}}},{"node":{"fields":{"slug":"/Developer-IntelliJ-Setup-(for-Kotlin)","title":"Developer Intelli J Setup For Kotlin"}}},{"node":{"fields":{"slug":"/Diagrams","title":"Diagrams"}}},{"node":{"fields":{"slug":"/Distributed-Execution","title":"Distributed Execution"}}},{"node":{"fields":{"slug":"/Generic-Types,-Interfaces,-and-Inheritance","title":"Generic Types Interfaces And Inheritance"}}},{"node":{"fields":{"slug":"/Downloading-and-Building","title":"Downloading And Building"}}},{"node":{"fields":{"slug":"/Home","title":"Home"}}},{"node":{"fields":{"slug":"/Import-System","title":"Import System"}}},{"node":{"fields":{"slug":"/Legacy-Eclipse-Instructions","title":"Legacy Eclipse Instructions"}}},{"node":{"fields":{"slug":"/Maven-Notes","title":"Maven Notes"}}},{"node":{"fields":{"slug":"/Modal-Models-RFC","title":"Modal Models RFC"}}},{"node":{"fields":{"slug":"/Multiports-and-Banks-of-Reactors","title":"Multiports And Banks Of Reactors"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/Protobufs","title":"Protobufs"}}},{"node":{"fields":{"slug":"/Publications-and-Presentations","title":"Publications And Presentations"}}},{"node":{"fields":{"slug":"/Regression-Tests","title":"Regression Tests"}}},{"node":{"fields":{"slug":"/Related-Work","title":"Related Work"}}},{"node":{"fields":{"slug":"/Results-of-Experiments-for-Rhythm","title":"Results Of Experiments For Rhythm"}}},{"node":{"fields":{"slug":"/Running-Benchmarks","title":"Running Benchmarks"}}},{"node":{"fields":{"slug":"/Running-Lingua-Franca-IDE-(Epoch)-with-Kotlin-based-Code-Generators-Enabled-(without-Eclipse-Environment)","title":"Running Lingua Franca IDE Epoch With Kotlin Based Code Generators Enabled Without Eclipse Environment"}}},{"node":{"fields":{"slug":"/Support-Matrix","title":"Support Matrix"}}},{"node":{"fields":{"slug":"/Tardiness","title":"Tardiness"}}},{"node":{"fields":{"slug":"/Target-Specification","title":"Target Specification"}}},{"node":{"fields":{"slug":"/Termination","title":"Termination"}}},{"node":{"fields":{"slug":"/Timing-Analysis","title":"Timing Analysis"}}},{"node":{"fields":{"slug":"/Tools","title":"Tools"}}},{"node":{"fields":{"slug":"/Troubleshooting","title":"Troubleshooting"}}},{"node":{"fields":{"slug":"/Using-Maven","title":"Using Maven"}}},{"node":{"fields":{"slug":"/Web-Based-Editor","title":"Web Based Editor"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Cpp","title":"Writing Reactors In Cpp"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Python","title":"Writing Reactors In Python"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-TypeScript","title":"Writing Reactors In Type Script"}}}]}},"pageContext":{"id":"b875cf62-97dc-5389-b711-2495de7df790"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}