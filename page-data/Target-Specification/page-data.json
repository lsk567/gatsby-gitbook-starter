{"componentChunkName":"component---src-templates-docs-js","path":"/Target-Specification","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"6898dfef-13d9-5995-9c8f-f8457b414542","title":"Target Specification","slug":"/Target-Specification"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"target\"), \" specification specifies the language in which reactions are written. This is also the language of the program(s) generated by the Lingua Franca compiler. Every Lingua Franca program begins with a statement of this form:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"target\"), \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"name\"), \";\")), mdx(\"p\", null, \"where \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"name\"), \" gives the name of some Lingua Franca target language. The target languages currently supported are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"writing-reactors-in-c\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"C\")), \": The target language is C, and the runtime framework is provided by the code generator to be linked with the generated code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Writing-Reactors-in-C%EF%BC%8B%EF%BC%8B\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Cpp\")), \": The target language is C++.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Writing-Reactors-in-Python\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"Python\")), \": The target language is Python.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Writing-Reactors-in-TypeScript\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"TS\")), \": The target language is TypeScript, a typed extension of JavaScript.\")), mdx(\"p\", null, \"A target specification may have optional parameters, the names and values of which depend on which specific target you are using.  The syntax for specifying parameters is:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"target <targetName> {\\n    parameterName1: <value>,\\n    parameterName2: <value>,\\n    ...\\n    parameterNameN: <value>\\n};\\n\")), mdx(\"p\", null, \"A comma on the last line is optional.\"), mdx(\"h2\", null, \"Target Parameters\"), mdx(\"p\", null, \"Target parameters are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#build\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"build\")), \": A command to execute after code generation instead of the default compile command.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#compiler\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"compiler\")), \":  A string giving the name of the target language compiler to use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fast\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"fast\")), \": A boolean specifying to execute as fast as possible without waiting for physical time to match logical time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#files\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"files\")), \": An array of files to be copied to the directory that contains the generated sources.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#flags\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"flags\")), \": An arrays of strings giving options to be passed to the target compiler.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#keepalive\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"keepalive\")), \": A boolean indicate whether to keep executing even if the event queue is empty.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#logging\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"logging\")), \": An indicator of how much information to print when executing the program.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#no-compile\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"no-compile\")), \": If true, then do not invoke a target language compiler. Just generate code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#protobufs\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"protobufs\")), \": An array of .proto files that are to be compiled and included in the generated code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#timeout\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"timeout\")), \": A time value (with units) specifying the logical stop time of execution. See [\", \"[Termination]\", \"].\")), mdx(\"p\", null, \"Not all targets support all target options, but at a minimum, each target is expected to support \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"build\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"files\"), \", and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"timeout\"), \".\\nDetailed documentation is given below.\\nFor example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"target C {\\n    compiler: \\\"cc\\\",\\n    flags: \\\"-O3\\\",\\n    fast: true,\\n    logging: log,\\n    timeout: 10 secs\\n};\\n\")), mdx(\"p\", null, \"This specifies to use compiler \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cc\"), \" instead of the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gcc\"), \", to use optimization level 3, to execute as fast as possible, and to exit execution when logical time has advanced to 10 seconds. Note that all events at logical time 10 seconds greater than the starting logical time will be executed.\"), mdx(\"p\", null, \"A target may support overriding the target parameters on the command line when invoking the compiled program. Refer to the appropriate target language documentation.\"), mdx(\"p\", null, \"Array-valued target parameters are given as a comma-separated list enclosed by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"]\"), \". For example,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"target C {\\n    files: [\\\"foo.ext\\\", \\\"bar.ext\\\"]\\n}\\n\")), mdx(\"h3\", null, \"build\"), mdx(\"p\", null, \"A command to execute after code generation instead of the default compile command.  This is either a single string or an array of strings. The specified command(s) will be executed an environment that has the following environment variables defined:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LF_CURRENT_WORKING_DIRECTORY\"), \": The directory in which the command is invoked.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LF_SOURCE_DIRECTORY\"), \": The directory containing the .lf file being compiled.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LF_SOURCE_GEN_DIRECTORY\"), \": The directory in which generated files are placed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LF_BIN_DIRECTORY\"), \": The directory into which to put binaries.\")), mdx(\"p\", null, \"The command will be executed in the same directory as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".lf\"), \" file being compiled. For example, if you specify\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"target C {\\n    build: \\\"./compile.sh Foo\\\"\\n}\\n\")), mdx(\"p\", null, \"then instead of invoking the C compiler after generating code, the code generator will invoke your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compile.sh\"), \" script, which could look something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"#!/bin/bash\\nCC=\\\"gcc\\\"\\n$CC ${LF_SOURCE_GEN_DIRECTORY}/$1.c \\\\\\n    ${LF_SOURCE_GEN_DIRECTORY}/core/platform/lf_macos_support.c \\\\\\n    -o ${LF_BIN_DIRECTORY}/$1 \\\\\\n    -pthread -DNUMBER_OF_WORKERS=2\\n\")), mdx(\"p\", null, \"which will invoke the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gcc\"), \" compiler on the generated file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Foo.c\"), \".\"), mdx(\"h3\", null, \"compiler\"), mdx(\"p\", null, \"A string giving the name of the target language compiler to use.\"), mdx(\"h3\", null, \"fast\"), mdx(\"p\", null, \"A boolean which, if true, specifies to execute as fast as possible without waiting for physical time to match logical time.\"), mdx(\"h3\", null, \"files\"), mdx(\"p\", null, \"An array of files to be copied to the directory that contains the generated sources. These files are given relative to the directory containing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".lf\"), \" file that has the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"target\"), \" directive. If a file begins with a slash \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \", then the path is assumed to be relative to the root directory of the Lingua Franca source tree.  For example, if you wish to use audio on a Mac, you can specify:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"target C {\\n    files: [\\\"/lib/C/util/audio_loop_mac.c\\\", \\\"/lib/C/util/audio_loop.h\\\"]\\n}\\n\")), mdx(\"p\", null, \"Your preamble code can then include these files, for example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"preamble {= \\n    #include \\\"audio_loop_mac.c\\\"\\n=}\\n\")), mdx(\"p\", null, \"Your reactions can then invoke functions defined in that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".c\"), \" file.\"), mdx(\"p\", null, \"Sometimes, you will need access to these files from target code in a reaction. For the C target (at least), the generated program will contain a line like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    #define TARGET_FILES_DIRECTORY \\\"path\\\"\\n\")), mdx(\"p\", null, \"where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" is the full path to the directory containing these files. This can be used in reactions, for example, to read those files.\"), mdx(\"h3\", null, \"flags\"), mdx(\"p\", null, \"An arrays of strings giving options to be passed to the target compiler. If there is just one flag, this can be an ordinary string.\"), mdx(\"h3\", null, \"keepalive\"), mdx(\"p\", null, \"A boolean value true or false to indicate whether to keep executing even if the event queue is empty. It is particularly useful to set this to true when asynchronous events may trigger a physical action. By default, a program will exit once there are no more events to process.\"), mdx(\"h3\", null, \"logging\"), mdx(\"p\", null, \"By default, when executing a generated Lingua Franca program, error messages, warnings, and informational messages are printed to standard out. You can get additional information printed by setting this parameter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LOG\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DEBUG\"), \". The latter is more verbose. Some targets also support \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"Tracing\"\n  }, \"tracing\"), \", which outputs binary traces of an execution rather than human-readable text and is designed to have minimal impact on performance.\"), mdx(\"h3\", null, \"no-compile\"), mdx(\"p\", null, \"If true, then do not invoke a target language compiler. Just generate code.\"), mdx(\"h3\", null, \"protobufs\"), mdx(\"p\", null, \"An array of .proto files that are to be compiled and included in the generated code.\"), mdx(\"h3\", null, \"timeout\"), mdx(\"p\", null, \"A time value (with units) specifying the logical stop time of execution. See [\", \"[Termination]\", \"].\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#target-parameters","title":"Target Parameters","items":[{"url":"#build","title":"build"},{"url":"#compiler","title":"compiler"},{"url":"#fast","title":"fast"},{"url":"#files","title":"files"},{"url":"#flags","title":"flags"},{"url":"#keepalive","title":"keepalive"},{"url":"#logging","title":"logging"},{"url":"#no-compile","title":"no-compile"},{"url":"#protobufs","title":"protobufs"},{"url":"#timeout","title":"timeout"}]}]},"parent":{"relativePath":"Target-Specification.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Benchmarks","title":"Benchmarks"}}},{"node":{"fields":{"slug":"/A-future-proof-package-and-import-system","title":"A Future Proof Package And Import System"}}},{"node":{"fields":{"slug":"/Clone-the-Repository","title":"Clone The Repository"}}},{"node":{"fields":{"slug":"/Containerized-Execution","title":"Containerized Execution"}}},{"node":{"fields":{"slug":"/Contributing","title":"Contributing"}}},{"node":{"fields":{"slug":"/Creating-and-Managing-Submodules","title":"Creating And Managing Submodules"}}},{"node":{"fields":{"slug":"/Developer-IntelliJ-Setup-(for-Kotlin)","title":"Developer Intelli J Setup For Kotlin"}}},{"node":{"fields":{"slug":"/Diagrams","title":"Diagrams"}}},{"node":{"fields":{"slug":"/Distributed-Execution","title":"Distributed Execution"}}},{"node":{"fields":{"slug":"/Generic-Types,-Interfaces,-and-Inheritance","title":"Generic Types Interfaces And Inheritance"}}},{"node":{"fields":{"slug":"/Downloading-and-Building","title":"Downloading And Building"}}},{"node":{"fields":{"slug":"/Home","title":"Home"}}},{"node":{"fields":{"slug":"/Import-System","title":"Import System"}}},{"node":{"fields":{"slug":"/Legacy-Eclipse-Instructions","title":"Legacy Eclipse Instructions"}}},{"node":{"fields":{"slug":"/Maven-Notes","title":"Maven Notes"}}},{"node":{"fields":{"slug":"/Modal-Models-RFC","title":"Modal Models RFC"}}},{"node":{"fields":{"slug":"/Multiports-and-Banks-of-Reactors","title":"Multiports And Banks Of Reactors"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/Protobufs","title":"Protobufs"}}},{"node":{"fields":{"slug":"/Publications-and-Presentations","title":"Publications And Presentations"}}},{"node":{"fields":{"slug":"/Regression-Tests","title":"Regression Tests"}}},{"node":{"fields":{"slug":"/Related-Work","title":"Related Work"}}},{"node":{"fields":{"slug":"/Results-of-Experiments-for-Rhythm","title":"Results Of Experiments For Rhythm"}}},{"node":{"fields":{"slug":"/Running-Benchmarks","title":"Running Benchmarks"}}},{"node":{"fields":{"slug":"/Running-Lingua-Franca-IDE-(Epoch)-with-Kotlin-based-Code-Generators-Enabled-(without-Eclipse-Environment)","title":"Running Lingua Franca IDE Epoch With Kotlin Based Code Generators Enabled Without Eclipse Environment"}}},{"node":{"fields":{"slug":"/Support-Matrix","title":"Support Matrix"}}},{"node":{"fields":{"slug":"/Tardiness","title":"Tardiness"}}},{"node":{"fields":{"slug":"/Target-Specification","title":"Target Specification"}}},{"node":{"fields":{"slug":"/Termination","title":"Termination"}}},{"node":{"fields":{"slug":"/Timing-Analysis","title":"Timing Analysis"}}},{"node":{"fields":{"slug":"/Tools","title":"Tools"}}},{"node":{"fields":{"slug":"/Troubleshooting","title":"Troubleshooting"}}},{"node":{"fields":{"slug":"/Using-Maven","title":"Using Maven"}}},{"node":{"fields":{"slug":"/Web-Based-Editor","title":"Web Based Editor"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Cpp","title":"Writing Reactors In Cpp"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Python","title":"Writing Reactors In Python"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-TypeScript","title":"Writing Reactors In Type Script"}}}]}},"pageContext":{"id":"6898dfef-13d9-5995-9c8f-f8457b414542"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}