{"componentChunkName":"component---src-templates-docs-js","path":"/Legacy-Eclipse-Instructions","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"93e90f3f-6a2c-579d-9a2a-9d5cb24b2998","title":"Legacy Eclipse Instructions","slug":"/Legacy-Eclipse-Instructions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The preferred way to set up Eclipse to develop Lingua Franca is using Oomph. See [\", \"[Developer Eclipse setup with Oomph]\", \"]. This page describes a more manual process. Be warned: Eclipse is a complex and brittle environment. Things can go wrong.\"), mdx(\"p\", null, \"These instructions will set you up as an Eclipse-based developer of the Lingua Franca IDE and compiler, which is based on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.eclipse.org/Xtext/documentation/index.html\"\n  }, \"xtext\"), \".\"), mdx(\"h4\", null, \"1. Installation of Eclipse and Xtext\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.eclipse.org/downloads/\"\n  }, \"Install Eclipse\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start Eclipse in a new workspace (a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"new\"), \" workspace is safest because Eclipse is brittle).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Xtext in that workspace by following \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.eclipse.org/Xtext/download.html\"\n  }, \"these instructions\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Kieler, which is used to render diagrams of reactor programs. Instructions are \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/icyphy/lingua-franca/wiki/diagrams#enabling-diagram-synthesis\"\n  }, \"here\"), \".\")), mdx(\"h4\", null, \"2. Set up the Project\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In Eclipse, select File->Import->Team->Team Project Set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Browse to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~/git/lingua-franca/xtext\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$LF/xtext\"), \") and select the file \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LinguaFrancaProjectSetHTTPS.psf\"), \" (if you cloned using https) or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LinguaFrancaProjectSetSSH.psf\"), \" (if you cloned using ssh).  Note that even if the .psf files are located elsewhere, the .psf files create projects that refer to files in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~/git/lingua-franca/\"), \".  If you accidentally cloned the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lingua-franca\"), \" repo anywhere other than in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~/git/\"), \", then you could be confused about which files Eclipse is using.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Close the Eclipse welcome page (which obscures the projects)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You should have six projects (and a lot of build errors). Open the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"org.icyphy.linguafranca\"), \" project.\")), mdx(\"h4\", null, \"3. Build the Lingua Franca IDE\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the Package Explorer, browse to src->org.icyphy->LinguaFranca.xtext\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Right click on that file and select Run As->Generate Xtext Artifacts. It will warn you that there are errors. Proceed.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The project will rebuild, which may take some time. Hopefully, there are no build errors.\")), mdx(\"h4\", null, \"4. Run the Lingua Franca IDE\"), mdx(\"p\", null, \"To run the Lingua Franca IDE, right click on the first project in the PackageExplorer, org.icyphy.linguafranca, and select Run As->Eclipse Application. A new Eclipse opens.  This Eclipse is the Lingua Franca IDE. In this new Eclipse:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select File->New->Project  (a General Project is adequate).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Give the project a name, like \\\"test\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Uncheck Use default location\"), \" and specify a location that you can remember, such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/Users/yourname/test\"), \". The default is ridiculous.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Close the Eclipse welcome window, if it is open. It obscures the project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Right click on the project name and select New->File.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Give the new a name like \\\"HelloWorld.lf\\\" (with .lf extension).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"IMPORTANT:\"), \" A dialog appears: Do you want to convert 'test' to an Xtext Project? Say YES.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start typing in Lingua-Franca! Try this:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  target C;\\n  main reactor HelloWorld {\\n      timer t;\\n      reaction(t) {=\\n          printf(\\\"Hello World.\\\\n\\\");\\n      =}\\n  }\\n\")), mdx(\"p\", null, \"When you save, generated code goes into your project directory, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/Users/yourname/test\"), \".  That directory now has two directories inside it, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src-gen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bin\"), \". The first contains the generated C code and the second contains the resulting executable program. Run the program:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    cd /Users/yourname/test\\n    bin/HelloWorld\\n\")), mdx(\"p\", null, \"This should produce output that looks something like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Start execution at time Sun Oct  6 08:42:49 2019\\nplus 314266000 nanoseconds.\\nHello World.\\nElapsed logical time (in nsec): 0\\nElapsed physical time (in nsec): 1106000\\n\")), mdx(\"p\", null, \"  This should print \\\"Hello World\\\".\"), mdx(\"h4\", null, \"Working on the Lingua-Franca Compiler\"), mdx(\"p\", null, \"The source code for the compiler is in the package \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org.icyphy.linguafranca\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The grammar is in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/org.icyphy/LinguaFranca.xtext\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The code generator for the C target is in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/org.icyphy.generator/CGenerator.xtend\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The code generator for the TypeScript target is in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/org.icyphy.generator/TypeScriptGenerator.xtend\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The code generator for the C++ target is in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/org.icyphy.generator/CppGenerator.xtend\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To add a code generator for a new target, edit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/org.icyphy.generator/CppGenerator.xtend\"))), mdx(\"h4\", null, \"Troubleshooting\"), mdx(\"p\", null, \"Eclipse is astonishingly brittle and the setup is rather complex. Many things can go wrong. Here are some hints for getting things working:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you are a Mac user running macOS Catalina, you may need JDK 14 (or above) to launch the Lingua Franca IDE. More information about JDK 14 and Catalina's hardened runtime can be found \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.oracle.com/technetwork/java/javase/using-jdk-jre-macos-catalina-5781620.html\"\n  }, \"here\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you did not clone the repo into the recommended directory, then importing the Team Project Set from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LinguaFrancaProjectSetHTTPS.psf\"), \" will result in Eclipse cloning a fresh copy of the lingua-franca repository; the clone will be located in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/git/lingua-franca\"), \" (it will not use the clone that you obtained the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LinguaFrancaProjectSet.psf\"), \" from!). Note that, if you already have a clone in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/git/lingua-franca\"), \", that will simply be reused (not overwritten).\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git status\"), \" to check for modified files and untracked files. Particularly suspicious are files with names like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".classpath\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".project\"), \". It is mysterious how these get modified, but we recommend trying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git stash\"), \" and removing all untracked files that you did not create yourself.  Alternatively, you can start with a fresh clone of the repo.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You may have files in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src-gen\"), \" directories that are interfering with the build processes. For example, if you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" to install Node.js modules, you will likely get many files that the build system will then try to compile. In theory, you should be able to remove all src-gen directories and then start again by generating the Xtext artifacts, as recommended above.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#1-installation-of-eclipse-and-xtext","title":"1. Installation of Eclipse and Xtext"},{"url":"#2-set-up-the-project","title":"2. Set up the Project"},{"url":"#3-build-the-lingua-franca-ide","title":"3. Build the Lingua Franca IDE"},{"url":"#4-run-the-lingua-franca-ide","title":"4. Run the Lingua Franca IDE"},{"url":"#working-on-the-lingua-franca-compiler","title":"Working on the Lingua-Franca Compiler"},{"url":"#troubleshooting","title":"Troubleshooting"}]},"parent":{"relativePath":"Legacy-Eclipse-Instructions.md"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/Benchmarks","title":"Benchmarks"}}},{"node":{"fields":{"slug":"/A-future-proof-package-and-import-system","title":"A Future Proof Package And Import System"}}},{"node":{"fields":{"slug":"/Clone-the-Repository","title":"Clone The Repository"}}},{"node":{"fields":{"slug":"/Containerized-Execution","title":"Containerized Execution"}}},{"node":{"fields":{"slug":"/Contributing","title":"Contributing"}}},{"node":{"fields":{"slug":"/Creating-and-Managing-Submodules","title":"Creating And Managing Submodules"}}},{"node":{"fields":{"slug":"/Developer-IntelliJ-Setup-(for-Kotlin)","title":"Developer Intelli J Setup For Kotlin"}}},{"node":{"fields":{"slug":"/Diagrams","title":"Diagrams"}}},{"node":{"fields":{"slug":"/Distributed-Execution","title":"Distributed Execution"}}},{"node":{"fields":{"slug":"/Generic-Types,-Interfaces,-and-Inheritance","title":"Generic Types Interfaces And Inheritance"}}},{"node":{"fields":{"slug":"/Downloading-and-Building","title":"Downloading And Building"}}},{"node":{"fields":{"slug":"/Home","title":"Home"}}},{"node":{"fields":{"slug":"/Import-System","title":"Import System"}}},{"node":{"fields":{"slug":"/Legacy-Eclipse-Instructions","title":"Legacy Eclipse Instructions"}}},{"node":{"fields":{"slug":"/Maven-Notes","title":"Maven Notes"}}},{"node":{"fields":{"slug":"/Modal-Models-RFC","title":"Modal Models RFC"}}},{"node":{"fields":{"slug":"/Multiports-and-Banks-of-Reactors","title":"Multiports And Banks Of Reactors"}}},{"node":{"fields":{"slug":"/Overview","title":"Overview"}}},{"node":{"fields":{"slug":"/Protobufs","title":"Protobufs"}}},{"node":{"fields":{"slug":"/Publications-and-Presentations","title":"Publications And Presentations"}}},{"node":{"fields":{"slug":"/Regression-Tests","title":"Regression Tests"}}},{"node":{"fields":{"slug":"/Related-Work","title":"Related Work"}}},{"node":{"fields":{"slug":"/Results-of-Experiments-for-Rhythm","title":"Results Of Experiments For Rhythm"}}},{"node":{"fields":{"slug":"/Running-Benchmarks","title":"Running Benchmarks"}}},{"node":{"fields":{"slug":"/Running-Lingua-Franca-IDE-(Epoch)-with-Kotlin-based-Code-Generators-Enabled-(without-Eclipse-Environment)","title":"Running Lingua Franca IDE Epoch With Kotlin Based Code Generators Enabled Without Eclipse Environment"}}},{"node":{"fields":{"slug":"/Support-Matrix","title":"Support Matrix"}}},{"node":{"fields":{"slug":"/Tardiness","title":"Tardiness"}}},{"node":{"fields":{"slug":"/Target-Specification","title":"Target Specification"}}},{"node":{"fields":{"slug":"/Termination","title":"Termination"}}},{"node":{"fields":{"slug":"/Timing-Analysis","title":"Timing Analysis"}}},{"node":{"fields":{"slug":"/Tools","title":"Tools"}}},{"node":{"fields":{"slug":"/Troubleshooting","title":"Troubleshooting"}}},{"node":{"fields":{"slug":"/Using-Maven","title":"Using Maven"}}},{"node":{"fields":{"slug":"/Web-Based-Editor","title":"Web Based Editor"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Cpp","title":"Writing Reactors In Cpp"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-Python","title":"Writing Reactors In Python"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/Writing-Reactors-in-TypeScript","title":"Writing Reactors In Type Script"}}}]}},"pageContext":{"id":"93e90f3f-6a2c-579d-9a2a-9d5cb24b2998"}},"staticQueryHashes":["2619113677","3706406642","417421954"]}